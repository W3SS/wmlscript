# Copyright (C) 2006-2009, Parrot Foundation.
# $Id$

## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := @versiondir@
BIN_DIR       := @bindir@
LIB_DIR       := @libdir@$(VERSION)
DOC_DIR       := @docdir@$(VERSION)
MANDIR        := @mandir@$(VERSION)

# Set up extensions
LOAD_EXT      := @load_ext@
O             := @o@

# Various paths
PMC_DIR       := src/pmc
OPS_DIR       := src/ops
LIBPATH       := src/runtime

## Setup some commands
MAKE          := @make_c@
PERL          := @perl@
PROVE         := @perl@ -I@build_dir@/lib
CAT           := @cat@
CHMOD         := @chmod@
CP            := @cp@
MKPATH        := @mkpath@
RM_F          := @rm_f@
RM_RF         := @rm_rf@
POD2MAN       := pod2man
PARROT        := ../../parrot@exe@
PBC_TO_EXE    := ../../pbc_to_exe@exe@
#IF(darwin):
#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

SRM := Stack

WMLSCRIPT_GROUP := $(PMC_DIR)/wmls_group$(LOAD_EXT)
WMLSCRIPT_OPS := $(OPS_DIR)/wmls_ops$(LOAD_EXT)

PMC_DEPS := \
 config/makefiles/pmc.in \
 $(PMC_DIR)/wmlsinteger.pmc \
 $(PMC_DIR)/wmlsfloat.pmc \
 $(PMC_DIR)/wmlsstring.pmc \
 $(PMC_DIR)/wmlsboolean.pmc \
 $(PMC_DIR)/wmlsinvalid.pmc \
 $(PMC_DIR)/wmlsbytecode.pmc

OPS_DEPS := \
 config/makefiles/ops.in \
 $(OPS_DIR)/wmls.ops

DOCS := README

PBCS := \
 wmlsi.pbc \
 wmlsd.pbc \
 wmlscript/library/wmlslang.pbc \
 wmlscript/library/wmlsfloat.pbc \
 wmlscript/library/wmlsstring.pbc \
 wmlscript/library/wmlsconsole.pbc

GEN_PIR := \
 src/opcode.pir \
 src/stdlibs.pir

build: \
 $(WMLSCRIPT_OPS) \
 $(WMLSCRIPT_GROUP) \
 wmlscript/wmlscript.pbc \
 $(PBCS)

all: build installable

$(WMLSCRIPT_GROUP): $(PMC_DEPS)
	$(MAKE) $(PMC_DIR)

$(WMLSCRIPT_OPS): $(OPS_DEPS)
	$(MAKE) $(OPS_DIR)

wmlsi.pbc: wmlsi.pir
	$(PARROT) $(PARROT_ARGS) -o wmlsi.pbc wmlsi.pir

wmlsd.pbc: wmlsd.pir
	$(PARROT) $(PARROT_ARGS) -o wmlsd.pbc wmlsd.pir

wmlscript/wmlscript.pbc: src/WMLScript.pir \
 src/script.pir src/wmlsstdlibs.pir $(GEN_PIR)
	$(PARROT) -o wmlscript/wmlscript.pbc src/WMLScript.pir

src/opcode.pir: src/translation.rules build/translator.pl \
 build/SRM/Stack.pm build/SRM/Register.pm
	$(PERL) build/translator.pl --output src/opcode.pir --srm $(SRM) \
	  src/translation.rules

src/stdlibs.pir: src/wmlslibs.cfg build/stdlibs.pl
	$(PERL) build/stdlibs.pl --output src/stdlibs.pir src/wmlslibs.cfg

wmlscript/library/wmlslang.pbc: $(LIBPATH)/wmlslang.pir
	$(PARROT) --output=wmlscript/library/wmlslang.pbc $(LIBPATH)/wmlslang.pir

wmlscript/library/wmlsfloat.pbc: $(LIBPATH)/wmlsfloat.pir
	$(PARROT) --output=wmlscript/library/wmlsfloat.pbc $(LIBPATH)/wmlsfloat.pir

wmlscript/library/wmlsstring.pbc: $(LIBPATH)/wmlsstring.pir
	$(PARROT) --output=wmlscript/library/wmlsstring.pbc $(LIBPATH)/wmlsstring.pir

wmlscript/library/wmlsconsole.pbc: $(LIBPATH)/wmlsconsole.pir
	$(PARROT) --output=wmlscript/library/wmlsconsole.pbc $(LIBPATH)/wmlsconsole.pir

installable: installable_wmlsi@exe@ installable_wmlsd@exe@

installable_wmlsi@exe@: wmlsi.pbc
	$(PBC_TO_EXE) wmlsi.pbc --install

installable_wmlsd@exe@: wmlsd.pbc
	$(PBC_TO_EXE) wmlsd.pbc --install

# regenerate the Makefile
Makefile: config/makefiles/root.in
	$(PERL) Configure.pl

help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  build:             wmlsi.pbc, wmlsd.pbc"
	@echo "                     This is the default."
	@echo "  all:               wmlsi.pbc wmlsd.pbc installable"
	@echo "  installable:       Create libs and self-hosting binaries to be installed."
	@echo "  install:           Install the installable targets and docs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: all
	$(PERL) t/harness

codetest: codetest-c codetest-make codetest-perl codetest-pir codetest-pod

T_C     := src//pmc//*.pmc src//ops//*.ops
T_MAKE  := config//makefiles//root.in config//makefiles//ops.in config//makefiles//pmc.in
T_PERL  := Configure.pl t//harness t//*.t t//Parrot//Test//*.pm \
          build//*.pl build//SRM//*.pm
T_PIR   := *.pir src//*.pir src//runtime//*.pir t//pmc//*.t
T_POD   := doc//*.pod

codetest-c:
	- $(PROVE) @build_dir@/t/codingstd/c_code_coda.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_cppcomments.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_indent.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_macro_args.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_operator.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_parens.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/c_returns.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/cuddled_else.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_C)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_C)

codetest-make:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/make_code_coda.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_MAKE)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_MAKE)

codetest-perl:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/cuddled_else.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/perlcritic.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_PERL)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_PERL)

codetest-pir:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/filenames.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/pir_code_coda.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_PIR)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_PIR)

codetest-pod:
	- $(PROVE) @build_dir@/t/codingstd/copyright.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/linelength.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/tabs.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/trailing_space.t $(T_POD)
	- $(PROVE) @build_dir@/t/codingstd/pod_syntax.t $(T_POD)

install: installable
	$(MAKE) $(OPS_DIR) install
	$(MAKE) $(PMC_DIR) install
	$(CP) installable_wmlsi@exe@ $(BIN_DIR)/parrot-wmlsi@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-wmlsi@exe@
	$(CP) installable_wmlsd@exe@ $(BIN_DIR)/parrot-wmlsd@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-wmlsd@exe@
	-$(MKPATH) $(LIB_DIR)/languages/wmlscript
	$(CP) wmlscript/*.pbc $(LIB_DIR)/languages/wmlscript
	-$(MKPATH) $(LIB_DIR)/languages/wmlscript/library
	$(CP) wmlscript/library/*.pbc $(LIB_DIR)/languages/wmlscript/library
	-$(MKPATH) $(MANDIR)/man1
	$(POD2MAN) wmlsi.pir > $(MANDIR)/man1/parrot-wmlsi.1
	$(POD2MAN) wmlsd.pir > $(MANDIR)/man1/parrot-wmlsd.1
	-$(MKPATH) $(DOC_DIR)/languages/wmlscript
	$(CP) $(DOCS) $(DOC_DIR)/languages/wmlscript

uninstall:
	$(MAKE) $(OPS_DIR) uninstall
	$(MAKE) $(PMC_DIR) uninstall
	$(RM_F) $(BIN_DIR)/parrot-wmlsi@exe@
	$(RM_F) $(BIN_DIR)/parrot-wmlsd@exe@
	$(RM_RF) $(LIB_DIR)/languages/wmlscript
	$(RM_F) $(MANDIR)/man1/parrot-wmlscript.1
	$(RM_RF) $(DOC_DIR)/languages/wmlscript

win32-inno-installer: installable
	-$(MKPATH) man/man1
	$(POD2MAN) wmlsi.pir > man/man1/parrot-wmlsi.1
	$(POD2MAN) wmlsd.pir > man/man1/parrot-wmlsd.1
	-$(MKPATH) man/html
	pod2html --infile wmlsi.pir --outfile man/html/parrot-wmlsi.html
	pod2html --infile wmlsd.pir --outfile man/html/parrot-wmlsd.html
	$(CP) installable_wmlsi@exe@ parrot-wmlsi.exe
	$(CP) installable_wmlsd@exe@ parrot-wmlsd.exe
	$(PERL) @build_dir@/tools/dev/mk_inno_language.pl wmlscript
	iscc parrot-wmlscript.iss

TEST_CLEANERS := \
 "t/*.pir" \
 "t/*.pbc" \
 "t/*.wmls" \
 "t/*.wmlsc" \
 "t/*.out"

testclean:
	$(RM_F) $(TEST_CLEANERS)

BUILD_CLEANERS := \
 $(GEN_PIR) \
 "*.pbc" \
 "*.c" \
 "*$(O)" \
 installable_wmlsi@exe@ \
 installable_wmlsd@exe@ \
#IF(win32): parrot-wmlsi.exe \
#IF(win32): parrot-wmlsd.exe \
#IF(win32):  parrot-wmlscript.iss \
#IF(win32):  "setup-parrot-*.exe" \
 "wmlscript/*.pbc" \
 "wmlscript/library/*.pbc"

clean:
	$(MAKE) $(OPS_DIR) clean
	$(MAKE) $(PMC_DIR) clean
	$(RM_F) $(TEST_CLEANERS) $(BUILD_CLEANERS)
	$(RM_RF) man

realclean:
	$(MAKE) $(OPS_DIR) realclean
	$(MAKE) $(PMC_DIR) realclean
	$(RM_F) $(TEST_CLEANERS) $(BUILD_CLEANERS) Makefile
	$(RM_RF) man *.tmp

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:
