/*
Copyright (C) 2006-2009, Parrot Foundation.
$Id$

=head1 WMLScript Invalid

=head2 Description

C<WmlsInvalid> extends C<Undef> to provide a class with the behaviour of
the WMLScript C<Invalid> type.

=head3 Methods

=over 4

=cut

*/

static INTVAL dynpmc_WmlsBoolean;
static INTVAL dynpmc_WmlsInteger;
static INTVAL dynpmc_WmlsInvalid;

pmclass WmlsInvalid
    extends Undef
    provides scalar
    dynpmc
    group wmls_group
    hll wmlscript maps Undef {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(INTERP,
            Parrot_str_new_constant(INTERP, "WmlsBoolean"));
        dynpmc_WmlsInteger = Parrot_pmc_get_type_str(INTERP,
            Parrot_str_new_constant(INTERP, "WmlsInteger"));
        dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(INTERP,
            Parrot_str_new_constant(INTERP, "WmlsInvalid"));
    }

/*

=item C<PMC *clone()>

=cut

*/
    VTABLE PMC* clone() {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

/*

=item C<PMC* get_class()>

Return the integer 4.

=cut

*/
    VTABLE PMC* get_class() {
        PMC* retval = Parrot_pmc_new(interp, dynpmc_WmlsInteger);
        VTABLE_set_integer_native(INTERP, retval, 4);
        return retval;
    }

/*

=item C<STRING* get_string()>

Return the string "invalid".

=cut

*/
    VTABLE STRING* get_string() {
        return Parrot_str_new_constant(INTERP, "invalid");
    }

/*

=item C<void increment()>

=cut

*/
    VTABLE void increment() {
        return;
    }

/*

=item C<void decrement()>

=cut

*/
    VTABLE void decrement() {
        return;
    }

/*

=item C<PMC* absolute(PMC *dest)>

=item C<void i_absolute()>

=cut

*/
    VTABLE PMC* absolute(PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_absolute() {
        return;
    }

/*

=item C<PMC* neg(PMC *dest)>

=item C<void i_neg()>

=cut

*/
    VTABLE PMC* neg(PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_neg() {
        return;
    }

/*

=item C<PMC* bitwise_not(PMC *dest)>

=item C<void i_bitwise_not()>

=cut

*/
    VTABLE PMC* bitwise_not(PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_not() {
        return;
    }

/*

=item C<PMC* logical_not(PMC *dest)>

=item C<void i_logical_not()>

=cut

*/
    VTABLE PMC* logical_not(PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_logical_not() {
        return;
    }

/*

=back

=head3 non-Vtable Methods

=over 4

=item C<void add(PMC *value, PMC *dest)>

=item C<void i_add(PMC *value)>

=cut

*/
    PMC* add(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    void i_add(PMC* value) {
        return;
    }

/*

=item C<PMC* subtract(PMC *value, PMC *dest)>

=item C<void i_subtract(PMC *value)>

=cut

*/
    PMC* subtract(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    void i_subtract(PMC* value) {
        return;
    }

/*

=item C<PMC* multiply(PMC *value, PMC *dest)>

=item C<void i_multiply(PMC *value)>

=cut

*/
    PMC* multiply(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    void i_multiply(PMC* value) {
        return;
    }

/*

=item C<PMC* divide(PMC *value, PMC *dest)>

=item C<void i_divide(PMC *value)>

=cut

*/
    PMC* divide(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    void i_divide(PMC* value) {
        return;
    }

/*

=item C<PMC* floor_divide(PMC *value, PMC *dest)>

=item C<void i_floor_divide(PMC *value)>

=cut

*/
    PMC* floor_divide(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    void i_floor_divide(PMC* value) {
        return;
    }

/*

=item C<PMC* modulus(PMC *value, PMC *dest)>

=item C<void i_modulus(PMC *value)>

=cut

*/
    PMC* modulus(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    void i_modulus(PMC* value) {
        return;
    }

/*

=item C<PMC* bitwise_or(PMC *value, PMC *dest)>

=item C<void i_bitwise_or(PMC *value)>

=cut

*/
    VTABLE PMC* bitwise_or(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_or(PMC* value) {
        return;
    }

/*

=item C<PMC* bitwise_and(PMC *value, PMC *dest)>

=item C<void i_bitwise_and(PMC *value)>

=cut

*/
    VTABLE PMC* bitwise_and(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_and(PMC* value) {
        return;
    }

/*

=item C<void bitwise_xor(PMC *value, PMC *dest)>

=item C<void i_bitwise_xor(PMC *value)>

=cut

*/
    VTABLE PMC* bitwise_xor(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_xor(PMC* value) {
        return;
    }

/*

=item C<PMC* bitwise_shr(PMC *value, PMC *dest)>

=item C<void i_bitwise_shr(PMC *value)>

=cut

*/
    VTABLE PMC* bitwise_shr(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_shr(PMC* value) {
        return;
    }

/*

=item C<PMC* bitwise_lsr(PMC *value, PMC *dest)>

=item C<void i_bitwise_lsr(PMC *value)>

=cut

*/
    VTABLE PMC* bitwise_lsr(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_lsr(PMC* value) {
        return;
    }

/*

=item C<PMC* bitwise_shl(PMC *value, PMC *dest)>

=item C<void i_bitwise_shl(PMC *value)>

=cut

*/
    VTABLE PMC* bitwise_shl(PMC* value, PMC* dest) {
        return Parrot_pmc_new(INTERP, dynpmc_WmlsInvalid);
    }

    VTABLE void i_bitwise_shl(PMC* value) {
        return;
    }

/*

=item C<PMC* is_equal(PMC* value)>

=cut

*/
    MULTI INTVAL is_equal(DEFAULT value) {
        return 4;
    }

/*

=item C<PMC* cmp(PMC *value)>

=cut

*/
    MULTI INTVAL cmp(DEFAULT value) {
        return 4;
    }

}

/*

=back

=cut

*/


/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
