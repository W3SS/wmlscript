/*
Copyright (C) 2006-2009, Parrot Foundation.
$Id$
*/

=head1 WMLScript Operations

=head2 Description

=head3 Operations

=over 8

=cut

#include "parrot/dynext.h"
VERSION = PARROT_VERSION;


=item B<defined>(out PMC, invar PMC)

implements C<ISVALID> WMLScript opcode.

=cut

inline op defined(out PMC, invar PMC) :base_core {
    const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
        Parrot_str_new_constant(interp, "WmlsBoolean"));

    const INTVAL result = PMC_IS_NULL($2) ? 0 : VTABLE_defined(interp, $2);
    $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
    VTABLE_set_integer_native(interp, $1, result);
    goto NEXT();
}


=item B<istrue>(out PMC, invar PMC)

implements C<TOBOOL> WMLScript opcode.

=cut

inline op istrue(out PMC, invar PMC) :base_core {
    const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
        Parrot_str_new_constant(interp, "WmlsInvalid"));
    const INTVAL type = VTABLE_type(interp, $2);

    if (type == dynpmc_WmlsInvalid) {
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        const INTVAL result = VTABLE_get_bool(interp, $2);
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, result);
    }
    goto NEXT();
}


=item B<isgt>(out PMC, invar PMC, invar PMC)

implements C<GT> WMLScript opcode.

=cut

inline op isgt(out PMC, invar PMC, invar PMC) {
    INTVAL result;
    Parrot_mmd_multi_dispatch_from_c_args(interp,
            "cmp", "PP->I", $2, $3, &result);

    if (4 == result) {
        const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsInvalid"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, result > 0);
    }
    goto NEXT();
}


=item B<isge>(out PMC, invar PMC, invar PMC)

implements C<GE> WMLScript opcode.

=cut

inline op isge(out PMC, invar PMC, invar PMC) {
    INTVAL result;
    Parrot_mmd_multi_dispatch_from_c_args(interp,
            "cmp", "PP->I", $2, $3, &result);

    if (4 == result) {
        const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsInvalid"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, result >= 0);
    }
    goto NEXT();
}


=item B<isle>(out PMC, invar PMC, invar PMC)

implements C<LE> WMLScript opcode.

=cut

inline op isle(out PMC, invar PMC, invar PMC) {
    INTVAL result;
    Parrot_mmd_multi_dispatch_from_c_args(interp,
            "cmp", "PP->I", $2, $3, &result);

    if (4 == result) {
        const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsInvalid"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, result <= 0);
    }
    goto NEXT();
}


=item B<islt>(out PMC, invar PMC, invar PMC)

implements C<LT> WMLScript opcode.

=cut

inline op islt(out PMC, invar PMC, invar PMC) {
    INTVAL result;
    Parrot_mmd_multi_dispatch_from_c_args(interp,
            "cmp", "PP->I", $2, $3, &result);

    if (4 == result) {
        const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsInvalid"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, result < 0);
    }
    goto NEXT();
}

=item B<iseq>(out PMC, invar PMC, invar PMC)

implements C<EQ> WMLScript opcode.

=cut

inline op iseq(out PMC, invar PMC, invar PMC) {
    INTVAL result;
    Parrot_mmd_multi_dispatch_from_c_args(interp,
            "is_equal", "PP->I", $2, $3, &result);

    if (4 == result) {
        const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsInvalid"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, result);
    }
    goto NEXT();
}


=item B<isne>(out PMC, invar PMC, invar PMC)

implements C<NE> WMLScript opcode.

=cut

inline op isne(out PMC, invar PMC, invar PMC) {
    INTVAL result;
    Parrot_mmd_multi_dispatch_from_c_args(interp,
            "is_equal", "PP->I", $2, $3, &result);

    if (4 == result) {
        const INTVAL dynpmc_WmlsInvalid = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsInvalid"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsInvalid);
    }
    else {
        const INTVAL dynpmc_WmlsBoolean = Parrot_pmc_get_type_str(interp,
            Parrot_str_new_constant(interp, "WmlsBoolean"));
        $1 = Parrot_pmc_new(interp, dynpmc_WmlsBoolean);
        VTABLE_set_integer_native(interp, $1, !result);
    }
    goto NEXT();
}


=back

=cut

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */

